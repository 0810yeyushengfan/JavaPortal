<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!--什么是Bean管理?-->
    <!--Bean管理指的是两个操作:-->
    <!--1.Spring创建对象-->
    <!--2.Spring注入属性-->


    <!--1.基于xml方式创建对象:-->
    <!--1.1.在spring配置文件中，使用bean标签，标签里面添加对应属性，就可以实现对象创建-->
    <!--1.2.在bean标签有很多属性，介绍常用的属性:-->
    <!--1.2.1.id属性:配置bean的唯一标识-->
    <!--1.2.2.class属性:类全路径(包+类的路径)-->
    <!--1.3.创建对象时候，默认也是执行无参数构造方法完成对象创建(因此没有无参构造在配置bean的时候会报错)-->
    <!--配置User对象创建-->
    <bean id="user" class="com.yeyu.spring5.bean.User"></bean>
    <!--2.基于xml方式注入属性:-->
    <!--2.1.DI:依赖注入，就是注入属性-->
    <!--2.2.两种属性注入的方法:-->
    <!--2.2.1.第一种注入方式:使用set方法进行注入:-->
    <!--2.2.1.1.创建类，定义属性和对应的set方法-->
    <!--2.2.1.2.在spring配置文件配置对象创建，配置属性注入-->
    <bean id="book1" class="com.yeyu.spring5.bean.Book">
        <!--使用property完成属性注入:
            name:类里面对应的要注入的属性的名称
            value:需要向属性里面注入的值
        -->
        <property name="name" value="易筋经"/>
        <property name="address" value="中国"/>
        <property name="author" value="达摩老祖"/>
    </bean>
    <!--2.2.2.第二种注入方式:使用有参数构造进行注入(所以说此时类中没有无参构造也是可以的):-->
    <!--2.2.2.1.创建类，定义属性，创建属性对应有参数构造方法-->
    <!--2.2.2.2.在spring配置文件中进行配置-->
    <bean id="orders" class="com.yeyu.spring5.bean.Orders">
        <constructor-arg name="name" value="电脑"></constructor-arg>
        <constructor-arg name="address" value="China"></constructor-arg>
    </bean>

    <!--2.3.p名称空间注入(了解):-->
    <!--2.3.1使用p名称空间注入，可以简化基于xml配置通过set方法注入属性的方式-->
    <!--2.3.2.步骤:-->
    <!--2.3.2.1.添加p名称空间(即xmlns:p)在配置文件中-->
    <!--2.3.2.2.进行属性注入，在bean标签里面进行操作-->
    <bean name="book2" class="com.yeyu.spring5.bean.Book" p:address="中国" p:author="无名氏" p:name="九阳神功"></bean>

    <!--2.4.xml注入其他类型属性:-->
    <!--2.4.1.字面量:-->
    <bean id="book3" class="com.yeyu.spring5.bean.Book">
        <!--2.4.1.1.null值:-->
        <property name="author">
            <null/>
        </property>
        <!--2.4.1.2.属性值包含特殊符号:-->
        <!--2.4.1.2.1.把<>进行转义成&lt;和&gt;-->
        <property name="name" value="&lt;哈哈&gt;"></property>
        <!--2.4.1.2.2.把带特殊符号内容写到CDATA区中-->
        <property name="address">
            <value><![CDATA[<<南京>>]]></value>
        </property>
    </bean>
    <!--2.4.2.外部bean:-->
    <bean id="userService" class="com.yeyu.spring5.service.UserService">
        <!--注入userDao(外部bean)对象
            name属性:类里面的属性名称
            ref属性:创建的userDao对象的bean标签的id值
        -->
        <property name="userDao" ref="userDaoImpl"></property>
    </bean>
    <bean id="userDaoImpl" class="com.yeyu.spring5.dao.UserDaoImpl"></bean>

    <!--2.4.3.内部bean:-->
    <bean id="emp1" class="com.yeyu.spring5.bean.Emp">
        <!--设置两个普通属性-->
        <property name="name" value="lucy"></property>
        <property name="gender" value="女"></property>
        <!--设置对象类型属性-->
        <property name="dept">
            <bean id="dept1" class="com.yeyu.spring5.bean.Dept">
                <property name="name" value="安保部"></property>
            </bean>
        </property>
    </bean>

    <!--2.4.4.级联赋值:-->
    <!--2.4.4.1.第一种方法:-->
    <bean id="emp2" class="com.yeyu.spring5.bean.Emp">
        <!--设置两个普通属性-->
        <property name="name" value="lucy"></property>
        <property name="gender" value="女"></property>
        <!--级联赋值-->
        <property name="dept" ref="dept2"></property>
    </bean>
    <bean id="dept2" class="com.yeyu.spring5.bean.Dept">
        <property name="name" value="财务部"></property>
    </bean>

    <!--2.4.4.2.第二种方法:-->
    <bean id="emp3" class="com.yeyu.spring5.bean.Emp">
        <!--设置两个普通属性-->
        <property name="name" value="lucy"></property>
        <property name="gender" value="女"></property>
        <!--级联赋值-->
        <property name="dept" ref="dept3"></property>
        <!--需要保证dept有get()方法能够获取到，而且name有set()方法能够注入-->
        <property name="dept.name" value="技术部"></property>
    </bean>
    <bean id="dept3" class="com.yeyu.spring5.bean.Dept">
    </bean>

    <!--2.5.xml注入集合属性:-->
    <bean id="stu" class="com.yeyu.spring5.collectiontype.Stu">
        <!--2.5.1.数组类型属性注入:-->
        <property name="courses">
            <array>
                <value>java课程</value>
                <value>数据库课程</value>
            </array>
        </property>
        <!--2.5.2.list类型属性注入-->
        <property name="list">
            <list>
                <value>张三</value>
                <value>小三</value>
            </list>
        </property>
        <!--2.5.3.map类型属性注入-->
        <property name="maps">
            <map>
                <entry key="JAVA" value="java"></entry>
                <entry key="PHP" value="php"></entry>
            </map>
        </property>
        <!--2.5.4.set类型属性注入-->
        <property name="sets">
            <set>
                <value>MySQL</value>
                <value>Redis</value>
            </set>
        </property>
        <!--2.5.5.注入list集合类型，值是对象-->
        <property name="courseList">
            <list>
                <!--也可以值即用内部been的方式注入，即直接在list标签中写bean标签-->
                <ref bean="course1"></ref>
                <ref bean="course2"></ref>
            </list>
        </property>
    </bean>
    <!--创建多个course对象-->
    <bean id="course1" class="com.yeyu.spring5.collectiontype.Course">
        <property name="name" value="Spring5框架"></property>
    </bean>
    <bean id="course2" class="com.yeyu.spring5.collectiontype.Course">
        <property name="name" value="MyBatis框架"></property>
    </bean>

    <!--2.5.6.先把集合注入部分提取出来再注入-->
    <!--2.5.6.1.在spring配置文件中引入名称空间util(即配置xmlns:util和向xsi:schemaLocation中添加值)-->
    <!--2.5.6.2.使用util标签完成list集合注入提取-->
    <!--2.5.6.3.使用提取的list集合类型属性进行注入-->
    <util:list id="bookList">
        <value>易筋经</value>
        <value>九阴真经</value>
        <value>九阳神功</value>
    </util:list>
    <bean id="book" class="com.yeyu.spring5.collectiontype.Book">
        <property name="list" ref="bookList"></property>
    </bean>

    <!--3.bean的分类-->
    <!--3.1.Spring有两种类型bean:一种是普通bean，另外一种是工厂bean(FactoryBean)-->
    <!--3.2.普通bean:在配置文件中定义的bean类型就是返回类型-->
    <!--3.3.工厂bean:在配置文件中定义的bean类型可以和返回类型不一样-->
    <!--3.4.创建共产bean的步骤:-->
    <!--3.4.1.创建类，让这个类作为工厂bean，实现接口FactoryBean-->
    <!--3.4.2.实现接口里面的方法，在实现的方法中定义返回的bean类型-->
    <bean id="myBean" class="com.yeyu.spring5.factorybean.MyBean"></bean>

    <!--4.bean的作用域:-->
    <!--4.1.在Spring里面，默认情况下，bean是单实例对象-->
    <!--4.2.如何设置单实例还是多实例:-->
    <!--4.2.1.在spring配置文件到的bean标签里面有属性(scope)，用于设置单实例还是多实例-->
    <!--4.2.2.scope属性值:-->
    <!--singleton:默认值，表示是单实例对象-->
    <!--prototype:表示是多实例对象-->
    <!--4.2.3.singleton和prototype的区别:-->
    <!--4.2.3.1.singleton是单实例，prototype是多实例-->
    <!--4.2.3.2.设置scope的值是singleton的时候，加载spring配置文件时候就会创建单实例对象，-->
    <!--设置scope的值是prototype的时候，不是在加载spring配置文件时候创建对象，而是在调用getBean()方法的时候创建多实例对象-->
    <bean id="book4" class="com.yeyu.spring5.bean.Book" scope="prototype">
        <property name="name" value="易筋经"/>
        <property name="address" value="中国"/>
        <property name="author" value="达摩老祖"/>
    </bean>

    <!--5.bean的生命周期:-->
    <!--5.1.生命周期:从对象创建到对象销毁的过程-->
    <!--5.2.bean的生命周期:-->
    <!--5.2.1.通过构造器创建bean实例(默认使用无参数构造)-->
    <!--5.2.2.为bean的属性设置值和对其他bean的引用(调用set方法)-->
    <!--5.2.3.调用bean的初始化的方法(需要手动进行配置初始化的方法即bean的init-method属性)-->
    <!--5.2.4.bean可以使用了(对象获取到了)-->
    <!--5.2.5.当容器关闭时候，调用bean的销毁的方法(需要手动进行配置销毁的方法即bean的destroy-method属性)-->
    <bean id="orders2" class="com.yeyu.spring5.bean.Orders2" init-method="initMethod" destroy-method="destroyMethod">
        <property name="name" value="haha"></property>
    </bean>

    <!--6.bean的后置处理器:-->
    <!--添加完bean的后置处理器(BeanPostProcessor)之后，bean的生命周期变为七步:-->
    <!--6.2.1.通过构造器创建bean实例(默认使用无参数构造)-->
    <!--6.2.2.为bean的属性设置值和对其他bean的引用(调用set方法)-->
    <!--6.2.3.把bean的实例传递bean的后置处理器的方法postProcessBeforeInitialization-->
    <!--6.2.4.调用bean的初始化的方法(需要手动进行配置初始化的方法即bean的init-method属性)-->
    <!--6.2.5.把bean的实例传递bean的后置处理器的方法postProcessAfterInitialization-->
    <!--6.2.6.bean可以使用了(对象获取到了)-->
    <!--6.2.7.当容器关闭时候，调用bean的销毁的方法(需要手动进行配置销毁的方法即bean的destroy-method属性)-->
    <bean id="myBeanPost" class="com.yeyu.spring5.bean.MyBeanPost"></bean>

    <!--7.xml的自动装配:-->
    <!--7.1.自动装配:根据指定装配规则(属性名称或者属性类型)，Spring自动将匹配的属性值进行注入-->
    <!--7.2.bean的标签属性autowire，能够配置自动装配，autowire属性常用两个值:-->
    <!--7.2.1.byName:根据属性名称注入，注入值bean的id值和类的属性名称一样-->
    <!--7.2.2.byType:根据属性类型注入(有多个同类型属性时会不起作用)-->
    <bean id="emp4" class="com.yeyu.spring5.autowire.Emp" autowire="byType">
        <!--<property name="dept" ref="dept"></property>-->
    </bean>
    <bean id="emp5" class="com.yeyu.spring5.autowire.Emp" autowire="byName">
        <!--<property name="dept" ref="dept"></property>-->
    </bean>
    <bean id="dept" class="com.yeyu.spring5.autowire.Dept"></bean>

    <!--8.管理外部属性文件:-->
    <!--8.1.直接配置数据库信息:-->
    <!--8.1.1.引入德鲁伊连接池依赖的jar包-->
    <!--8.1.2.配置德鲁伊连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true"></property>
        <property name="username" value="root"></property>
        <property name="password" value="zyh769317."></property>
    </bean>
    <!--8.2.引入外部属性文件配置数据库连接池:-->
    <!--8.2.1.创建外部属性文件(properties格式的文件)，写数据库信息-->
    <!--8.2.2.把外部properties属性文件引入到spring的配置文件中，需要引入context名称空间(即增加xmlns:context和xsi:schemaLocation)-->
    <!--8.2.3.在spring的配置文件使用${}标签引入外部属性文件的值-->
    <!--引入外部属性文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--配置连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${prop.driverClass}"></property>
        <property name="url" value="${prop.url}"></property>
        <property name="username" value="${prop.userName}"></property>
        <property name="password" value="${prop.password}"></property>
    </bean>

</beans>