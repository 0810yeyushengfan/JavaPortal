<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--配置视图解析器-->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">

                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <context:component-scan base-package="com.yeyu.mvc"></context:component-scan>

    <mvc:default-servlet-handler></mvc:default-servlet-handler>

    <mvc:view-controller path="/" view-name="index"/>

    <mvc:annotation-driven></mvc:annotation-driven>


    <!--SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置:-->
    <mvc:interceptors>
        <ref bean="secondInterceptor"></ref>
        <!--<bean class="com.yeyu.mvc.interceptors.FirstInterceptor"></bean>-->
        <!--<ref bean="firstInterceptor"></ref>-->
        <!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 -->
        <mvc:interceptor>
            <!--/*  是拦截所有的文件夹，不包含子文件夹-->
            <!--/** 是拦截所有的文件夹及里面的子文件夹-->
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/"/>
            <ref bean="firstInterceptor"></ref>
        </mvc:interceptor>
        <!--
       以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求
   -->
    </mvc:interceptors>

    <!--异常处理器(以前还接触过ThymeleafViewResolver和CommonsMultipartResolver)-->
    <!--1.基于配置的异常处理-->
    <!--SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver-->
    <!--HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver(SpringMVC默认使用的异常处理器)和SimpleMappingExceptionResolver-->
    <!--SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式:-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!--异常映射-->
        <property name="exceptionMappings">
            <props>
                <!--
                    properties的键:表示处理器方法执行过程中出现的异常(全类名)
                    properties的值(双标签中的文本):表示若出现指定异常时，设置一个新的视图名称(会被视图解析器解析)，跳转到指定页面
                -->
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
        <!--
            将name属性设置为exceptionAttribute后，value属性可以设置一个属性名，将出现的异常信息通过此属性名在请求域中进行共享
        -->
        <property name="exceptionAttribute" value="ex"></property>
    </bean>
</beans>