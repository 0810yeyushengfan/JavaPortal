package jiangjie2;
/*
方法的重写(override/overwrite)
1.重写:子类继承父类之后，可以对父类中同名同参数的方法进行覆盖操作。
2.应用:重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。
3.重写的规定:
           方法的声明:权限修饰符 返回值类型 方法名（形参列表） throws 异常的类型{
           方法体
           }
           约定俗称:子类中的叫重写的方法，父类中的叫被重写的方法。
           3.1子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同
           3.2子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符
              特殊情况:子类不能重写父类中声明为private权限的方法。
           3.3返回值类型
              父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void。
              父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或者A类的子类。
              父类被重写的方法的返回值类型是基本数据类型（比如double），则子类重写的方法的返回值类型必须是相同的基本数据类型。
           3.4子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型（具体放到异常处理的时候讲）。
           3.5子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写只是覆盖）。

 */
public class PersonTest {
    public static void main(String[] args) {
        Student s=new Student("CS");
        s.eat();
        s.walk(10);
        s.study();
        Person p=new Person();
        p.eat();
    }
}
