<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <!--在configuration中的每个标签都有顺序，顺序错误会报错-->

      <!--
            1.properties:mybatis可以使用properties来引入外部properties配置文件的内容
                         resource:引入类路径下的资源，如果在其他包下，需要使用包名+文件名引入，如果在类路径下，直接使用文件名引入
                         url:引入网络路径或者磁盘路径下的资源
       -->
    <properties resource="dbconfig.properties"></properties>
    
    <!--
            2.settings包含很多重要的设置项
              setting:涌来设置每一个设置项
              name:设置项名
              value:设置项取值
    -->
    <settings>
<!--    mapUnderscoreToCamelCase:是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。默认值为false-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <setting name="jdbcTypeForNull" value="NULL"/>
        <!--显式的指定每个需要更改的值，即使它是默认的，防止版本更新带来的设置默认值变化产生的问题-->
        <!--使用延迟加载需要的两个配置-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
    </settings>

    <!--
            3.typeAliases:别名处理器，可以为我们的java类型起别名
              基本数据类型的别名为下划线(_)+基本数据类型名，如int的别名为_int
              包装类和其他核心类的别名为类名小写，如String的别名为string
    -->
    <typeAliases>
        <!--
                typeAlias:为某个java类型起别名(别名不区分大小写，全类名区分大小写)
                          type:指定要起别名的类型全类名，别名就是类名小写:employee
                          alias:指定新的别名
        -->
<!--        <typeAlias type="helloWorld.Employee" alias="emp"/>-->
        <!--
                package:为某个包下的所有类批量起别名
                        name:指定包名(为当前包以及下面所有后代包的每一个类都起一个默认别名(类名小写))
                批量起别名的情况下，会出现当前包下有一个A类，包的后代包下也有一个A类，此时两个类的默认别名都为a，会产生别名冲突，此时可以使用@Alias注解为某个A类型指定新的别名
        -->
    </typeAliases>

    <!--
            4.environments:环境们，mybatis可以配置多种环境。
                           default:指定使用某种环境，可以到达快速切换环境的目的
              了解即可，在ssm中会使用spring进行整合，不需要配置此处
    -->
    <environments default="dev_mysql">
        <!--
                environment:配置一个具体的环境信息，里面必须包含transactionManager和dataSource这两个标签
                            id:当前环境的唯一标识
                transactionManager:事务管理器
                                   type:事务管理器的类型:
                                                      JDBC(JdbcTransactionFactory)
                                                      MANAGED(ManagedTransactionFactory)
                自定义事务管理器:实现了TransactionFactory接口，type指定为其全类名
                dataSource:数据源
                           type:数据源类型:
                                UNPOOLED(UnpooledDataSourceFactory)
                                POOLED(PooledDataSourceFactory)
                                JNDI(JndiDataSourceFactory)
                自定义数据源:实现DataSourceFactory接口，type指定为其全类名


        -->
        <environment id="dev_mysql">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>

        <environment id="dev_oracle">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${orcl.driver}"/>
                <property name="url" value="${orcl.url}"/>
                <property name="username" value="${orcl.username}"/>
                <property name="password" value="${orcl.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--
            5.databaseIdProvider:支持多数据库厂商的
                                 type:"DB_VENODR"(VendorDatabaseIdProvider)
                                      作用就是得到数据路厂商的标识(即驱动(getDatabaseProductName())),mybatis就能
                                      主要的标识有:MySQL,Oracle,SQL Server......
    -->
    <databaseIdProvider type="DB_VENDOR">
<!--        为不同的数据库厂商起别名-->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>

    <!--
            将我们写好的sql映射文件(EmployeeMapper.xml)一定要注册到全局配置文件(mybatis-config.xml)中,
            如果sql映射文件在类路径下，直接写文件名即可，如果在其他包下，需要用包名/类名的方式注册
     -->
    <!--6.mappers:将sql映射注册到全局配置中-->
    <mappers>
        <!--
                mapper:注册一个sql映射
                       注册配置文件:
                       resource:引用类路径下的sql映射文件，如mybatis/mapper/EmployeeMapper.xml
                       url:引用网路路径或者磁盘路径下的sql映射文件，如file:///var/mappers/AuthorMapper.xml
                       注册接口:
                       class:引用(注册接口):(推荐比较重要复杂的Dao接口我们来写sql映射文件，不重要简单的Dao接口为了开发快速可以使用注解)
                             有sql映射文件:映射文件名必须和接口同名，并且放在与接口同意目录下
                             没有sql映射文件:所有的sql都是利用注解写在接口上
        -->
<!--        <mapper resource="mybatis/mapper/EmployeeMapper.xml"/>-->
<!--        批量注册，将包内的接口全部注册(要保证映射文件名必须和接口同名，并且放在与接口同意目录下或者写了注解)-->
        <package name="dao"/>
    </mappers>
</configuration>