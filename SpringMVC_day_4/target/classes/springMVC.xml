<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
    <!--配置视图解析器-->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!--配置视图控制器-->
    <mvc:view-controller path="/" view-name="index"/>
    <mvc:view-controller path="/toAdd" view-name="employee_add"></mvc:view-controller>

    <!--开放对静态资源的访问-->
    <!--我们在tomcat的配置文件中配置的是静态资源采用defaultServlet来访问，但是我们在当前工程的tomcat的配置文件-->
    <!--配置了除了jsp类型外的全部文件都采用DispatcherServlet进行访问，但是它没有访问静态资源的功能，所以此时静态资源不能被获取，-->
    <!--此时我们需要通过<mvc:default-servlet-handler/>来开启默认的针对静态资源访问的defaultServlet，从而使得静态资源-->
    <!--能够被正常获取，但是单独设置了这个之后，之前我们设置的DispatcherServlet会不再起作用，所以我们需要再设置<mvc:annotation-driven/>-->
    <!--开启mvc的注解驱动来解决这个问题，使得一个资源的请求先通过DispatcherServlet，当DispatcherServlet处理不了时再通过-->
    <!--defaultServlet来处理，这样就解决了静态资源的访问问题-->
    <mvc:default-servlet-handler />
    <!--开启mvc的注解驱动-->
    <!--两大作用:-->
    <!--1.保证正常的静态资源的访问-->
    <!--2.保证在配置视图控制器的同时，其他控制器中的请求映射是生效的-->
    <mvc:annotation-driven/>
    <!--扫描组件-->
    <context:component-scan base-package="com.yeyu.mvc"/>
</beans>