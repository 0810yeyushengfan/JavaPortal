<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dao.EmployeeMapperDynamicSQL">
    <!--
        if
        choose (when, otherwise)
        trim (where, set)
        foreach
    -->
    <!--查询员工:要求，携带了哪个字段，查询条件就带上这个字段的值-->
    <!--public List<Employee> getEmpsByConditionIf(Employee employee);-->
    <!--
        查询的时候，如果某些条件没带可能sql拼装会有问题，比如下面的查询，如果没传id，在sql拼接时会出现"where and ......"的情况，会报错
        1.给where后面加上1=1(需要保证这一句话永远成立)，以后的条件都改成"and xxx"
        2.mybatis使用where标签来将所有的查询条件包括在内，mybatis就会将where标签内的第一个多出来的and或者or去掉，
          注意只能去掉前面的and或者or，如果and或者or写在后面，where标签不能去掉
        3.使用trim，详细看后面的select语句

    -->

    <select id="getEmpsByConditionIf" resultType="bean.Employee">
        <!--test:判断表达式(OGNL)
            OGNL参照ppt或者官方文档
            if:从参数中取值进行判断
            在test中遇见特殊符号应该去写转义字符，比如&&应该写成&amp;&amp;，空字符串""应该写成&quot;&quot;
        -->
        select * from tbl_employee <where>
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                and last_name like #{lastName}
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                and email like #{email}
            </if>
            <!--OGNL会进行字符串和数字的转换判断，即0==”0“-->
            <if test="gender==0 or gender==1">
                and gender like #{gender}
            </if>
    </where>
    </select>

    <!--public List<Employee> getEmpsByConditionTrim(Employee employee);-->
    <select id="getEmpsByConditionTrim" resultType="bean.Employee">
        select * from tbl_employee
        <!--
                后面多出的and或者or，where标签不能解决
                prefix="":前缀，trim标签体是整个字符串拼接后的结果，prefix给拼接后的整个字符串加一个前缀
                prefixOverrides="":前缀覆盖，去掉拼接后的整个字符串前面多余的字符
                suffix="":后缀，suffix给拼接后的整个字符串加一个后缀
                suffixOverrides="":前缀覆盖，去掉拼接后的整个字符串后面多余的字符
        -->
        <!--自定义字符串的截取规则-->
       <trim prefix="where" suffixOverrides="and">
        <if test="id!=null">
            id=#{id} and
        </if>
        <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
            last_name like #{lastName} and
        </if>
        <if test="email!=null and email.trim()!=&quot;&quot;">
            email like #{email} and
        </if>
        <!--OGNL会进行字符串和数字的转换判断，即0==”0“-->
        <if test="gender==0 or gender==1">
            gender like #{gender}
        </if>
    </trim>
    </select>


    <!--public List<Employee> getEmpsByConditionChoose(Employee employee);-->
    <select id="getEmpsByConditionChoose" resultType="bean.Employee">
        select * from tbl_employee
        <where>
            <!--如果带了id就用id查，带了lastName就用lastName查，带了email就用email查，啥也没带就用gender=0查，只会进入其中一个分支-->
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null">
                    last_name like #{lastName}
                </when>
                <when test="email!=null">
                    email like #{email}
                </when>
                <otherwise>
                    <!--1=1-->
                    gender=0
                </otherwise>
            </choose>
        </where>
    </select>


    <!--public void setEmpsByConditionIf(Employee employee);-->
    <update id="setEmpsByConditionIf" >
        update tbl_employee
        <trim prefix="set" suffixOverrides=",">
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="gender!=null">
                gender=#{gender}
            </if>
        </trim>
        where id=#{id}
    </update>

    <!--public List<Employee> getEmpsByconditionForeach(List<Integer> ids);-->
    <select id="getEmpsByconditionForeach" resultType="bean.Employee">
        <!--
                collection:指定要遍历的集合，list类型的参数会特殊处理封装在map中，在map中的key就叫list
                item:将当前遍历出的元素赋值给指定的变量
                separator:每个元素之间的分隔符
                open:在遍历出所有结果后的字符串开头拼接一个开始的字符
                close:在遍历出所有结果后的字符串末尾拼接一个结束的字符
                index:遍历lisr的时候index就是索引，item就是当前值
                      遍历map的时候index就是map中的key，item就是map的value
                #{变量名(item)}:取出变量的值也就是当前遍历出的值
        -->
        select * from tbl_employee
        <foreach collection="ids" item="item_id" separator="," open="where id in(" close=")" index="i">
               #{item_id}
               <!--#{i}+1-->
        </foreach>
    </select>
    <!--批量保存-->
    <!--public void addEmps(@Param("emps") List<Employee> emps);-->
    <!--MySQL下批量保存:可以使用foreach遍历，MySQL支持values(),(),()语法-->
<!--    <insert id="addEmps">-->
<!--        insert into tbl_employee(last_name,email,gender,d_id)-->
<!--        values-->
<!--        <foreach collection="emps" item="emp" separator=",">-->
<!--            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})-->
<!--        </foreach>-->
<!--     </insert>-->
    <!--这种方法需要数据库连接属性allowMultiQueries=true-->
    <insert id="addEmps">
        <foreach collection="emps" item="emp" separator=";">
            insert into tbl_employee(
--             last_name,email,gender,d_id
            <include refid="insertColumn"></include>)
            values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert>

    <!--
        _parameter:代表整个参数
                   单个参数:_parameter就是这个参数
                   多个参数:参数会封装成一个map，_parameter就是代表这个map
        _databaseId:如果配置了databaseIdProvider标签，_databaseId就是代表当前数据库的别名，比如现在_databaseId就是mysql
    -->
    <!--public List<Employee> getEmpsTestInnerParameter(Employee employee);-->
    <select id="getEmpsTestInnerParameter" resultType="bean.Employee">
        <!--bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值-->
        <bind name="_lastName" value="'%'+lastName+'%'"/>
        <if test="_databaseId=='mysql'">
            select * from tbl_employee
                <if test="_parameter!=null">
                    where last_name like #{_lastName}
                </if>
        </if>
        <if test="_databaseId=='oracle'">
            select * from employees
            <if test="_parameter!=null">
                where last_name like #{_parameter.lastName}
            </if>
        </if>
    </select>

    <!--
        抽取可重用的sql片段，方便后面引用
        1.sql抽取:经常将要查询的列名，或者插入用的列名抽取出来方便引用
        2.include来引用已经抽取的sql
        3.include还可以自定义一些property，sql标签内部就能使用其自定义的属性
          include-property取值的正确方式就是${property}，不能用#{property}
    -->
    <sql id="insertColumn">
        <if test="_databaseId=='oracle'">
            employee_id,last_name,email
        </if>
        <if test="_databaseId=='mysql'">
            last_name,email,gender,d_id
        </if>
    </sql>
</mapper>